#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Jul 21, 2020 04:09:02 PM CST  platform: Windows NT

import datetime
import tkinter as tk
from module import telegram as tlg
from module import monitor as mt

class GtcsMonitor(mt.Monitor):
    # Initial object.
    def __init__(self):
        pass

class GtcsView(tk.Tk):
    __tag_name_list = [
            "1.u16Statusflags :",
            "2.u16ActError    :",
            "3.u16ActProcNr   :",
            "4.u16ActStepNr   :",
            "5.u16ActCurr     :",
            "6.u16ActTorque   :",
            "7.u16ActRPM      :",
            "8.u16MaxCurrent  :",
            "9.u16MaxTorque   :",
            "10.u32Angle      :",
            "11.u32Revolutions:",
            "12.u16TMDFlags   :",
            "13.s16Debug      :",
            "14.s32Debug      :",
    ]
    __label_tag_list = []
    __label_msg_list = []

    def __init__(self):
        super().__init__()
        self.title("GTCS Test Program.")
        # self.text = self.Text(self)
        # self.text.pack()

        for idx,val in enumerate(self.__tag_name_list):
            self.__label_tag_list.append(tk.Label(self,text = val))
            self.__label_msg_list.append(tk.Text(self))
        
        for idx,val in enumerate(self.__label_tag_list):
            val.place(x=0,y=idx*20,anchor="nw")
        for idx,val in enumerate(self.__label_msg_list):
            val.place(x=100,y=idx*20,anchor="nw")
        
        self.__writeText()
    
    # Refresh MCB status.
    def __refresh_MCB_status(self,proot,pdict):
        _pdict = list(pdict["StatusTlg"].values())
        for idx,val in enumerate(self.__label_msg_list):
            val.delete(1.0,"end")
            val.insert(tk.END,_pdict[idx])
        self.__root.after(100, func=lambda: self.__refresh_MCB_status(proot, pdict))
        
    def __writeText(self):
        # self.text.insert(tk.END, str(time.time())+'\n')
        # self.text.insert(tk.END, str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))+'\n')
        _tlg = tlg.TlgStructure()
        print(id(_tlg))
        _lst = list(_tlg.status_response.dict.values())
        for idx,val in enumerate(self.__label_msg_list):
            val.delete(1.0,"end")
            # val.insert(tk.END, str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))+"\n")
            val.insert(tk.END,_lst[idx])

        self.tk.after(100,self.__writeText)  # again forever

    # def start(self):
    # def start(self):
    #     self.root.after(100, self.__writeText)
    #     self.root.mainloop()

